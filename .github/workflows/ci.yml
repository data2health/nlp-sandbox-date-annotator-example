name: ci

on:
  push:
    branches:
      - main
      - develop
    release:
      types: [created]
  pull_request:

env:
  docker_repository: nlpsandbox/date-annotator-example

jobs:
  lint:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Lint Dockerfiles
      uses: docker://hadolint/hadolint:latest
      with:
        entrypoint: hadolint
        args: src/server/Dockerfile

  test:
    needs: [lint]
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip tox
        pip install tox
    # - name: Run integration tests
    #   run: |
    #     cd src/server
    #     tox

  # build:
  #   if: github.event_name != 'release'
  #   needs: [test]
  #   runs-on: ubuntu-18.04
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Build Docker image
  #     uses: docker/build-push-action@v2
  #     with:
  #       context: src/server
  #       file: src/server/Dockerfile

  docker:
    needs: [test]
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Prepare
      id: prep
      run: |
        DOCKER_IMAGE=nlpsandbox/date-annotator-example
        VERSION=noop
        if [ "${{ github.event_name }}" = "schedule" ]; then
          VERSION=nightly
        elif [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
            VERSION=edge
          fi
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          VERSION=pr-${{ github.event.number }}
        fi
        TAGS="${DOCKER_IMAGE}:${VERSION}"
        if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          MINOR=${VERSION%.*}
          MAJOR=${MINOR%.*}
          TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
        elif [ "${{ github.event_name }}" = "push" ]; then
          TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
        fi
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=tags::${TAGS}
        echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: src/server
        file: src/server/Dockerfile
        platforms: linux/amd64,linux/arm64,linux/386
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.prep.outputs.tags }}
        # labels: |
        #   org.opencontainers.image.created=${{ steps.prep.outputs.created }}
        #   org.opencontainers.image.source=${{ github.repositoryUrl }}
        #   org.opencontainers.image.version=${{ steps.prep.outputs.version }}
        #   org.opencontainers.image.revision=${{ github.sha }}
        #   org.opencontainers.image.licenses=${{ github.event.repository.license.name }}


  # build-and-publish:
  #   needs: [test]
  #   runs-on: ubuntu-18.04
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Set variables
  #     id: vars
  #     run: |
  #       if [[ ${GITHUB_REF} = refs/tags/* ]]
  #       then
  #         echo ::set-output name=version::${GITHUB_REF#refs/tags/}
  #         echo ::set-output name=push::true
  #       else
  #         echo ::set-output name=version::test
  #         echo ::set-output name=push::false
  #       fi

  #   - name: Build Dockerfile.base
  #     uses: docker/build-push-action@v1
  #     with:
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}
  #       repository: ${{ env.docker_repository }}
  #       tags: latest, ${{ steps.vars.outputs.version }}
  #       push: ${{ steps.vars.outputs.push }}